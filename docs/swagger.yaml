basePath: /api
definitions:
  forms.AuthForm:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  forms.BookCreateForm:
    properties:
      description:
        maxLength: 255
        minLength: 2
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  forms.Pseudonym:
    properties:
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  forms.Social:
    properties:
      instagram:
        type: string
      telegram:
        type: string
      tiktok:
        type: string
      vk:
        type: string
    type: object
  forms.UserCreateForm:
    properties:
      bornDate:
        type: string
      email:
        maxLength: 255
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      middleName:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      passwordConfirm:
        maxLength: 255
        minLength: 8
        type: string
      pseudonym:
        $ref: '#/definitions/forms.Pseudonym'
      socialLinks:
        $ref: '#/definitions/forms.Social'
    required:
    - email
    - firstName
    - password
    - passwordConfirm
    - pseudonym
    - socialLinks
    type: object
  models.Pseudonym:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.Social:
    properties:
      instagram:
        type: string
      telegram:
        type: string
      tiktok:
        type: string
      vk:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      middleName:
        type: string
      pseudonym:
        $ref: '#/definitions/models.Pseudonym'
      socialLinks:
        $ref: '#/definitions/models.Social'
      updatedAt:
        type: string
    type: object
  responses.CreateResponse:
    properties:
      id:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: 127.0.0.1:5000
info:
  contact: {}
  description: Word-Flow API docs
  title: Word-Flow app API
  version: "1.0"
paths:
  /api/auth:
    post:
      description: Auth User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.AuthForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Auth User
      tags:
      - Auth
  /api/auth/refresh:
    post:
      description: Refresh User token
      parameters:
      - description: body
        in: body
        name: request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Refresh User token
      tags:
      - Auth
  /private/books:
    post:
      description: CreateBook Book
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.BookCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateBook Book
      tags:
      - Books
  /private/users:
    get:
      description: Get users list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get users list
      tags:
      - User
  /private/users/{id}:
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - User
  /users:
    post:
      description: CreateUser User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.UserCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateUser User
      tags:
      - User
swagger: "2.0"
