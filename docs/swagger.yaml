basePath: /api
definitions:
  forms.AuthForm:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  forms.BookCreateForm:
    properties:
      description:
        maxLength: 1000
        minLength: 2
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  forms.GoalCreateForm:
    properties:
      bookId:
        type: string
      description:
        maxLength: 255
        minLength: 2
        type: string
      endDate:
        type: string
      goalWords:
        minimum: 2
        type: number
      startDate:
        type: string
      title:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - bookId
    - endDate
    - goalWords
    - startDate
    - title
    type: object
  forms.Pseudonym:
    properties:
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  forms.ReportCreateForm:
    properties:
      bookId:
        type: string
      goalId:
        type: string
      wordsAmount:
        minimum: 2
        type: number
    required:
    - bookId
    - goalId
    - wordsAmount
    type: object
  forms.Social:
    properties:
      instagram:
        maxLength: 250
        type: string
      telegram:
        maxLength: 250
        type: string
      tiktok:
        maxLength: 250
        type: string
      vk:
        maxLength: 250
        type: string
    type: object
  forms.UserCreateForm:
    properties:
      bornDate:
        type: string
      email:
        maxLength: 255
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      middleName:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      passwordConfirm:
        maxLength: 255
        minLength: 8
        type: string
      pseudonym:
        $ref: '#/definitions/forms.Pseudonym'
      socialLinks:
        $ref: '#/definitions/forms.Social'
    required:
    - email
    - firstName
    - password
    - passwordConfirm
    - pseudonym
    - socialLinks
    type: object
  models.Book:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.BooksQueryParams:
    properties:
      orderBy:
        default: createdAt desc
        type: string
      page:
        type: integer
      perPage:
        type: integer
    type: object
  models.FullProfileChartData:
    properties:
      cumulative_progress:
        description: DailyProgress      []DailyProgressPoint `json:"daily_progress"`
        items:
          $ref: '#/definitions/models.ProgressPoint'
        type: array
      goal_completion:
        description: MonthlyComparison  []MonthlyStats       `json:"monthly_comparison"`
        items:
          $ref: '#/definitions/models.GoalsChart'
        type: array
    type: object
  models.GoalStatistics:
    properties:
      average_words_per_day:
        type: number
      book_id:
        type: string
      daily_words_required:
        type: number
      days_elapsed:
        type: integer
      days_remaining:
        type: integer
      goal_id:
        type: string
      percentage_complete:
        type: number
      remaining_words:
        type: number
      reports_count:
        type: integer
      total_words_written:
        type: number
      trend_compared_to_target:
        type: number
    type: object
  models.Goals:
    properties:
      bookId:
        type: string
      createdAt:
        type: string
      description:
        type: string
      endDate:
        type: string
      goalWords:
        type: number
      id:
        type: string
      isExpired:
        type: boolean
      isFinished:
        type: boolean
      startDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      wordsPerDay:
        type: number
      writtenWords:
        type: number
    type: object
  models.GoalsChart:
    properties:
      averageWordsPerDay:
        type: number
      bookId:
        type: string
      bookTitle:
        type: string
      createdAt:
        type: string
      dailyWordsRequired:
        type: number
      daysElapsed:
        type: integer
      daysRemaining:
        type: integer
      goalId:
        type: string
      goalTitle:
        type: string
      isExpired:
        type: boolean
      isFinished:
        type: boolean
      percentageComplete:
        type: number
      remainingWords:
        type: number
      reportsCount:
        type: integer
      totalWordsWritten:
        type: number
      trendComparedToTarget:
        type: number
    type: object
  models.GoalsQueryParams:
    properties:
      bookId:
        type: string
      orderBy:
        default: createdAt desc
        type: string
      page:
        type: integer
      perPage:
        type: integer
    type: object
  models.ProgressPoint:
    properties:
      bookId:
        type: string
      bookName:
        type: string
      completion_percent:
        type: number
      date:
        type: string
      goalId:
        type: string
      goalTitle:
        type: string
      target_total_words:
        type: number
      total_words:
        type: number
    type: object
  models.Pseudonym:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.Social:
    properties:
      instagram:
        type: string
      telegram:
        type: string
      tiktok:
        type: string
      vk:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      middleName:
        type: string
      pseudonym:
        $ref: '#/definitions/models.Pseudonym'
      socialLinks:
        $ref: '#/definitions/models.Social'
      updatedAt:
        type: string
    type: object
  models.UserStatistics:
    properties:
      average_days_to_complete:
        type: number
      average_words_per_day:
        type: number
      average_words_per_report:
        type: number
      completed_goals:
        type: integer
      current_streak:
        type: integer
      longest_streak:
        type: integer
      max_words_in_day:
        type: number
      most_productive_day:
        type: string
      total_books:
        type: integer
      total_days_with_activity:
        type: integer
      total_goals:
        type: integer
      total_reports:
        type: integer
      total_words:
        type: number
      user_id:
        type: string
    type: object
  responses.CreateResponse:
    properties:
      id:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: http://127.0.0.1:5000
info:
  contact: {}
  description: Word-Flow API docs
  title: Word-Flow app API
  version: "1.0"
paths:
  /api/auth:
    post:
      description: Auth User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.AuthForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Auth User
      tags:
      - Auth
  /api/auth/logout:
    post:
      description: Logout User
      parameters:
      - description: body
        in: body
        name: request
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logout User
      tags:
      - Auth
  /api/auth/refresh:
    post:
      description: Refresh User token
      parameters:
      - description: body
        in: body
        name: request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Refresh User token
      tags:
      - Auth
  /private/books:
    get:
      description: Get book by id
      parameters:
      - description: Query parameters for books list
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.BooksQueryParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get book by id
      tags:
      - Books
    post:
      description: CreateBook Book
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.BookCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateBook Book
      tags:
      - Books
  /private/books/{id}:
    get:
      description: GetBooksList
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: GetBooksList
      tags:
      - Books
  /private/goals:
    get:
      description: Get goals list by book id
      parameters:
      - description: Query parameters for goals list
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.GoalsQueryParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Goals'
            type: array
      summary: Get goals list by book id
      tags:
      - Goals
    post:
      description: Create goal for book Goals
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.GoalCreateForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateGoal Goals
      tags:
      - Goals
  /private/goals/{id}:
    get:
      description: Get goal by id
      parameters:
      - description: Goals id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Goals'
      summary: Get by id
      tags:
      - Goals
  /private/reports:
    post:
      description: CreateReport Report
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateReport Report
      tags:
      - Report
  /private/statistics/:
    get:
      description: Get profile full chart data user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullProfileChartData'
      summary: Get profile full chart data user id
      tags:
      - Statistics
  /private/users:
    get:
      description: Get users list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get users list
      tags:
      - User
  /private/users/{id}:
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - User
  /users:
    post:
      description: CreateUser User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.UserCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateUser User
      tags:
      - User
swagger: "2.0"
