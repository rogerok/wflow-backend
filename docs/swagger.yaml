basePath: /api
definitions:
  forms.AuthForm:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  forms.BookForm:
    properties:
      description:
        maxLength: 1000
        minLength: 2
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  forms.GoalCreateForm:
    properties:
      bookId:
        type: string
      description:
        maxLength: 255
        minLength: 2
        type: string
      endDate:
        type: string
      goalWords:
        minimum: 2
        type: number
      startDate:
        type: string
      title:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - bookId
    - endDate
    - goalWords
    - startDate
    - title
    type: object
  forms.GoalEditForm:
    properties:
      description:
        maxLength: 255
        minLength: 2
        type: string
      endDate:
        type: string
      goalWords:
        minimum: 2
        type: number
      startDate:
        type: string
      title:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - endDate
    - goalWords
    - startDate
    - title
    type: object
  forms.Pseudonym:
    properties:
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  forms.ReportCreateForm:
    properties:
      bookId:
        type: string
      goalId:
        type: string
      wordsAmount:
        minimum: 2
        type: number
    required:
    - bookId
    - goalId
    - wordsAmount
    type: object
  forms.Social:
    properties:
      instagram:
        maxLength: 250
        type: string
      telegram:
        maxLength: 250
        type: string
      tiktok:
        maxLength: 250
        type: string
      vk:
        maxLength: 250
        type: string
    type: object
  forms.UserCreateForm:
    properties:
      bornDate:
        type: string
      email:
        maxLength: 255
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      middleName:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      passwordConfirm:
        maxLength: 255
        minLength: 8
        type: string
      pseudonym:
        $ref: '#/definitions/forms.Pseudonym'
      socialLinks:
        $ref: '#/definitions/forms.Social'
    required:
    - email
    - firstName
    - password
    - passwordConfirm
    - pseudonym
    - socialLinks
    type: object
  models.Book:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.FullProfileChartData:
    properties:
      cumulativeProgress:
        description: DailyProgress      []DailyProgressPoint `json:"daily_progress"`
        items:
          $ref: '#/definitions/models.ProgressPoint'
        type: array
      goalCompletion:
        description: MonthlyComparison  []MonthlyStats       `json:"monthly_comparison"`
        items:
          $ref: '#/definitions/models.GoalsChart'
        type: array
    type: object
  models.GoalStatistics:
    properties:
      averageWordsPerDay:
        type: number
      averageWordsPerReport:
        type: number
      bookId:
        type: string
      dailyWordsRequired:
        type: number
      daysElapsed:
        type: integer
      daysRemaining:
        type: integer
      estimatedEndDate:
        type: string
      goalId:
        type: string
      percentageComplete:
        type: number
      remainingWords:
        type: number
      reportsCount:
        type: integer
      totalWordsWritten:
        type: number
    type: object
  models.GoalUpdateResponse:
    properties:
      goalWords:
        type: number
      wordsPerDay:
        type: number
    type: object
  models.Goals:
    properties:
      bookId:
        type: string
      createdAt:
        type: string
      description:
        type: string
      endDate:
        type: string
      goalWords:
        type: number
      id:
        type: string
      isExpired:
        type: boolean
      isFinished:
        type: boolean
      startDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      wordsPerDay:
        type: number
      writtenWords:
        type: number
    type: object
  models.GoalsChart:
    properties:
      averageWordsPerDay:
        type: number
      bookId:
        type: string
      bookTitle:
        type: string
      createdAt:
        type: string
      dailyWordsRequired:
        type: number
      daysElapsed:
        type: integer
      daysRemaining:
        type: integer
      goalId:
        type: string
      goalTitle:
        type: string
      isExpired:
        type: boolean
      isFinished:
        type: boolean
      percentageComplete:
        type: number
      remainingWords:
        type: number
      reportsCount:
        type: integer
      totalWordsWritten:
        type: number
      trendComparedToTarget:
        type: number
    type: object
  models.GoalsQueryParams:
    properties:
      bookId:
        type: string
      orderBy:
        default: createdAt desc
        type: string
      page:
        type: integer
      perPage:
        type: integer
    type: object
  models.ProgressPoint:
    properties:
      bookId:
        type: string
      bookName:
        type: string
      completionPercent:
        type: number
      date:
        type: string
      goalId:
        type: string
      goalTitle:
        type: string
      targetTotalWords:
        type: number
      totalWords:
        type: number
    type: object
  models.Pseudonym:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.Quotes:
    properties:
      id:
        type: string
      text:
        type: string
    type: object
  models.Social:
    properties:
      instagram:
        type: string
      telegram:
        type: string
      tiktok:
        type: string
      vk:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      middleName:
        type: string
      pseudonym:
        $ref: '#/definitions/models.Pseudonym'
      socialLinks:
        $ref: '#/definitions/models.Social'
      updatedAt:
        type: string
    type: object
  models.UserStatistics:
    properties:
      aboveAverageReportsRate:
        description: AboveAverageReportsRate is the percentage of reports where the
          user wrote more words than the average report.
        type: number
      activityConsistencyRate:
        description: ActivityConsistencyRate is the percentage of days with activity
          relative to the total number of days since the first report.
        type: number
      averageDaysToComplete:
        type: number
      averageWordsPerDay:
        type: number
      averageWordsPerReport:
        type: number
      completedGoals:
        type: integer
      currentStreak:
        description: CurrentStreak is the current streak of consecutive days the user
          has written.
        type: integer
      expiredGoalsCompletionRate:
        description: ExpiredGoalsCompletionRate is the percentage of expired goals
          that have been completed.
        type: number
      goalCompletionRate:
        description: GoalCompletionRate is the percentage of completed goals out of
          the total goals.
        type: number
      longestStreak:
        description: LongestStreak is the longest streak of consecutive days the user
          has written.
        type: integer
      maxWordsInDay:
        type: number
      mostProductiveDay:
        type: string
      overachievementRate:
        description: OverachievementRate is the percentage of goals where the user
          has written more words than planned.
        type: number
      overallGoalProgressRate:
        description: OverallGoalProgressRate is the percentage of goal progress based
          on written words and goal words.
        type: number
      totalBooks:
        type: integer
      totalDaysWithActivity:
        type: integer
      totalGoals:
        type: integer
      totalReports:
        type: integer
      totalWords:
        type: number
      userId:
        type: string
    type: object
  responses.CreateResponse:
    properties:
      id:
        type: string
    type: object
  responses.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: http://127.0.0.1:5000
info:
  contact: {}
  description: Word-Flow API docs
  title: Word-Flow app API
  version: "1.0"
paths:
  /api/auth:
    post:
      description: Auth User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.AuthForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Auth User
      tags:
      - Auth
  /api/auth/logout:
    post:
      description: Logout User
      parameters:
      - description: body
        in: body
        name: request
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logout User
      tags:
      - Auth
  /api/auth/refresh:
    post:
      description: Refresh User token
      parameters:
      - description: body
        in: body
        name: request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
      summary: Refresh User token
      tags:
      - Auth
  /private/books:
    post:
      description: CreateBook Book
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.BookForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateBook Book
      tags:
      - Books
  /private/books/{id}:
    get:
      description: Get book by id
      parameters:
      - description: book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get book by id
      tags:
      - Books
  /private/books/delete:
    delete:
      description: DeleteBook Book
      parameters:
      - description: book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
      summary: DeleteBook by id
      tags:
      - Books
  /private/books/edit/{id}:
    put:
      description: EditBook Book
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.BookForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
      summary: EditBook by id
      tags:
      - Books
  /private/goals:
    get:
      description: Get goals list by book id
      parameters:
      - description: Query parameters for goals list
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.GoalsQueryParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Goals'
            type: array
      summary: Get goals list by book id
      tags:
      - Goals
    post:
      description: Create goal for book Goals
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.GoalCreateForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateGoal Goals
      tags:
      - Goals
  /private/goals/{id}:
    get:
      description: Get goal by id
      parameters:
      - description: Goals id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Goals'
      summary: Get by id
      tags:
      - Goals
  /private/goals/delete:
    delete:
      description: DeleteGoal Book
      parameters:
      - description: goal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
      summary: DeleteGoal by id
      tags:
      - Goals
  /private/goals/edit/{id}:
    put:
      description: EditGoal goal Goals
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.GoalEditForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoalUpdateResponse'
      summary: EditGoal Goals
      tags:
      - Goals
  /private/quotes:
    get:
      description: Get random quote
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Quotes'
      summary: Get random quote
      tags:
      - Quotes
  /private/reports:
    post:
      description: CreateReport Report
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.ReportCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateReport Report
      tags:
      - Report
  /private/statistics/goal/{id}:
    get:
      description: get goal's activity statistics
      parameters:
      - description: Goal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoalStatistics'
      summary: Get statistics by goal id
      tags:
      - Statistics
  /private/statistics/user:
    get:
      description: get user's activity statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserStatistics'
      summary: Get statistics by user id
      tags:
      - Statistics
  /private/statistics/user/full:
    get:
      description: Get profile full chart data user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullProfileChartData'
      summary: Get profile full chart data user id
      tags:
      - Statistics
  /private/users:
    get:
      description: Get users list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get users list
      tags:
      - User
  /private/users/{id}:
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - User
  /users:
    post:
      description: CreateUser User
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.UserCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateResponse'
      summary: CreateUser User
      tags:
      - User
swagger: "2.0"
